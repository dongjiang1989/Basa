<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: tanx-bidding.proto
//   Date: 2014-10-31 07:29:01

namespace Tanx\BidRequest\AdzInfo {

  class Location extends \DrSlump\Protobuf\Enum {
    const NA = 0;
    const FIRST_VIEW = 1;
    const OTHER_VIEW = 2;
  }
}
namespace Tanx\BidRequest\AdzInfo {

  class ViewScreen extends \DrSlump\Protobuf\Enum {
    const SCREEN_NA = 0;
    const SCREEN_FIRST = 1;
    const SCREEN_SECOND = 2;
    const SCREEN_THIRD = 3;
    const SCREEN_FOURTH = 4;
    const SCREEN_FIFTH = 5;
    const SCREEN_OTHER = 6;
  }
}
namespace Tanx\BidRequest {

  class AdzInfo extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $pid = null;
    
    /**  @var string */
    public $publisher_id = null;
    
    /**  @var string */
    public $size = null;
    
    /**  @var int */
    public $ad_bid_count = 2;
    
    /**  @var int[]  */
    public $view_type = array();
    
    /**  @var int[]  */
    public $excluded_filter = array();
    
    /**  @var int */
    public $min_cpm_price = null;
    
    /**  @var int - \Tanx\BidRequest\AdzInfo\Location */
    public $adz_location = \Tanx\BidRequest\AdzInfo\Location::NA;
    
    /**  @var int - \Tanx\BidRequest\AdzInfo\ViewScreen */
    public $view_screen = \Tanx\BidRequest\AdzInfo\ViewScreen::SCREEN_NA;
    
    /**  @var int */
    public $page_session_ad_idx = null;
    
    /**  @var int[]  */
    public $api = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.AdzInfo');

      // REQUIRED UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING pid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING publisher_id = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "publisher_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING size = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 ad_bid_count = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "ad_bid_count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 2;
      $descriptor->addField($f);

      // REPEATED UINT32 view_type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "view_type";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED UINT32 excluded_filter = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "excluded_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 min_cpm_price = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "min_cpm_price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM adz_location = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "adz_location";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Tanx\BidRequest\AdzInfo\Location';
      $f->default   = \Tanx\BidRequest\AdzInfo\Location::NA;
      $descriptor->addField($f);

      // OPTIONAL ENUM view_screen = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "view_screen";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Tanx\BidRequest\AdzInfo\ViewScreen';
      $f->default   = \Tanx\BidRequest\AdzInfo\ViewScreen::SCREEN_NA;
      $descriptor->addField($f);

      // OPTIONAL UINT32 page_session_ad_idx = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "page_session_ad_idx";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 api = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "api";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pid> has a value
     *
     * @return boolean
     */
    public function hasPid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pid> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearPid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pid> value
     *
     * @return string
     */
    public function getPid(){
      return $this->_get(2);
    }
    
    /**
     * Set <pid> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setPid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <publisher_id> has a value
     *
     * @return boolean
     */
    public function hasPublisherId(){
      return $this->_has(11);
    }
    
    /**
     * Clear <publisher_id> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearPublisherId(){
      return $this->_clear(11);
    }
    
    /**
     * Get <publisher_id> value
     *
     * @return string
     */
    public function getPublisherId(){
      return $this->_get(11);
    }
    
    /**
     * Set <publisher_id> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setPublisherId( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <size> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <size> value
     *
     * @return string
     */
    public function getSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <size> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setSize( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <ad_bid_count> has a value
     *
     * @return boolean
     */
    public function hasAdBidCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <ad_bid_count> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearAdBidCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <ad_bid_count> value
     *
     * @return int
     */
    public function getAdBidCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <ad_bid_count> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setAdBidCount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <view_type> has a value
     *
     * @return boolean
     */
    public function hasViewType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <view_type> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearViewType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <view_type> value
     *
     * @param int $idx
     * @return int
     */
    public function getViewType($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <view_type> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setViewType( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <view_type>
     *
     * @return int[]
     */
    public function getViewTypeList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <view_type>
     *
     * @param int $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function addViewType( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <excluded_filter> has a value
     *
     * @return boolean
     */
    public function hasExcludedFilter(){
      return $this->_has(6);
    }
    
    /**
     * Clear <excluded_filter> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearExcludedFilter(){
      return $this->_clear(6);
    }
    
    /**
     * Get <excluded_filter> value
     *
     * @param int $idx
     * @return int
     */
    public function getExcludedFilter($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <excluded_filter> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setExcludedFilter( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <excluded_filter>
     *
     * @return int[]
     */
    public function getExcludedFilterList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <excluded_filter>
     *
     * @param int $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function addExcludedFilter( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <min_cpm_price> has a value
     *
     * @return boolean
     */
    public function hasMinCpmPrice(){
      return $this->_has(7);
    }
    
    /**
     * Clear <min_cpm_price> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearMinCpmPrice(){
      return $this->_clear(7);
    }
    
    /**
     * Get <min_cpm_price> value
     *
     * @return int
     */
    public function getMinCpmPrice(){
      return $this->_get(7);
    }
    
    /**
     * Set <min_cpm_price> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setMinCpmPrice( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <adz_location> has a value
     *
     * @return boolean
     */
    public function hasAdzLocation(){
      return $this->_has(8);
    }
    
    /**
     * Clear <adz_location> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearAdzLocation(){
      return $this->_clear(8);
    }
    
    /**
     * Get <adz_location> value
     *
     * @return int - \Tanx\BidRequest\AdzInfo\Location
     */
    public function getAdzLocation(){
      return $this->_get(8);
    }
    
    /**
     * Set <adz_location> value
     *
     * @param int - \Tanx\BidRequest\AdzInfo\Location $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setAdzLocation( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <view_screen> has a value
     *
     * @return boolean
     */
    public function hasViewScreen(){
      return $this->_has(9);
    }
    
    /**
     * Clear <view_screen> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearViewScreen(){
      return $this->_clear(9);
    }
    
    /**
     * Get <view_screen> value
     *
     * @return int - \Tanx\BidRequest\AdzInfo\ViewScreen
     */
    public function getViewScreen(){
      return $this->_get(9);
    }
    
    /**
     * Set <view_screen> value
     *
     * @param int - \Tanx\BidRequest\AdzInfo\ViewScreen $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setViewScreen( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <page_session_ad_idx> has a value
     *
     * @return boolean
     */
    public function hasPageSessionAdIdx(){
      return $this->_has(10);
    }
    
    /**
     * Clear <page_session_ad_idx> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearPageSessionAdIdx(){
      return $this->_clear(10);
    }
    
    /**
     * Get <page_session_ad_idx> value
     *
     * @return int
     */
    public function getPageSessionAdIdx(){
      return $this->_get(10);
    }
    
    /**
     * Set <page_session_ad_idx> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setPageSessionAdIdx( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <api> has a value
     *
     * @return boolean
     */
    public function hasApi(){
      return $this->_has(12);
    }
    
    /**
     * Clear <api> value
     *
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function clearApi(){
      return $this->_clear(12);
    }
    
    /**
     * Get <api> value
     *
     * @param int $idx
     * @return int
     */
    public function getApi($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <api> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function setApi( $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <api>
     *
     * @return int[]
     */
    public function getApiList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <api>
     *
     * @param int $value
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function addApi( $value){
     return $this->_add(12, $value);
    }
  }
}

namespace Tanx\BidRequest {

  class UserAttribute extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $timestamp = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.UserAttribute');

      // REQUIRED UINT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 timestamp = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "timestamp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \Tanx\BidRequest\UserAttribute
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\UserAttribute
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <timestamp> has a value
     *
     * @return boolean
     */
    public function hasTimestamp(){
      return $this->_has(2);
    }
    
    /**
     * Clear <timestamp> value
     *
     * @return \Tanx\BidRequest\UserAttribute
     */
    public function clearTimestamp(){
      return $this->_clear(2);
    }
    
    /**
     * Get <timestamp> value
     *
     * @return int
     */
    public function getTimestamp(){
      return $this->_get(2);
    }
    
    /**
     * Set <timestamp> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\UserAttribute
     */
    public function setTimestamp( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Tanx\BidRequest {

  class PrivateInfo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $tanx_cnaui = null;
    
    /**  @var string */
    public $risk_control = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.PrivateInfo');

      // OPTIONAL STRING tanx_cnaui = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tanx_cnaui";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING risk_control = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "risk_control";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tanx_cnaui> has a value
     *
     * @return boolean
     */
    public function hasTanxCnaui(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tanx_cnaui> value
     *
     * @return \Tanx\BidRequest\PrivateInfo
     */
    public function clearTanxCnaui(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tanx_cnaui> value
     *
     * @return string
     */
    public function getTanxCnaui(){
      return $this->_get(1);
    }
    
    /**
     * Set <tanx_cnaui> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\PrivateInfo
     */
    public function setTanxCnaui( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <risk_control> has a value
     *
     * @return boolean
     */
    public function hasRiskControl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <risk_control> value
     *
     * @return \Tanx\BidRequest\PrivateInfo
     */
    public function clearRiskControl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <risk_control> value
     *
     * @return string
     */
    public function getRiskControl(){
      return $this->_get(2);
    }
    
    /**
     * Set <risk_control> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\PrivateInfo
     */
    public function setRiskControl( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Tanx\BidRequest\Mobile {

  class Device extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $platform = null;
    
    /**  @var string */
    public $brand = null;
    
    /**  @var string */
    public $model = null;
    
    /**  @var string */
    public $os = null;
    
    /**  @var string */
    public $os_version = null;
    
    /**  @var int */
    public $network = null;
    
    /**  @var int */
    public $operator = null;
    
    /**  @var string */
    public $longitude = null;
    
    /**  @var string */
    public $latitude = null;
    
    /**  @var string */
    public $device_size = null;
    
    /**  @var string */
    public $device_id = null;
    
    /**  @var int */
    public $device_pixel_ratio = 1000;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.Mobile.Device');

      // OPTIONAL STRING platform = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "platform";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING brand = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "brand";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING model = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "model";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING os = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "os";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING os_version = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "os_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 network = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "network";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 operator = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "operator";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING longitude = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "longitude";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING latitude = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "latitude";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING device_size = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "device_size";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING device_id = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "device_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 device_pixel_ratio = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "device_pixel_ratio";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 1000;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <platform> has a value
     *
     * @return boolean
     */
    public function hasPlatform(){
      return $this->_has(1);
    }
    
    /**
     * Clear <platform> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearPlatform(){
      return $this->_clear(1);
    }
    
    /**
     * Get <platform> value
     *
     * @return string
     */
    public function getPlatform(){
      return $this->_get(1);
    }
    
    /**
     * Set <platform> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setPlatform( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <brand> has a value
     *
     * @return boolean
     */
    public function hasBrand(){
      return $this->_has(2);
    }
    
    /**
     * Clear <brand> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearBrand(){
      return $this->_clear(2);
    }
    
    /**
     * Get <brand> value
     *
     * @return string
     */
    public function getBrand(){
      return $this->_get(2);
    }
    
    /**
     * Set <brand> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setBrand( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <model> has a value
     *
     * @return boolean
     */
    public function hasModel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <model> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearModel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <model> value
     *
     * @return string
     */
    public function getModel(){
      return $this->_get(3);
    }
    
    /**
     * Set <model> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setModel( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <os> has a value
     *
     * @return boolean
     */
    public function hasOs(){
      return $this->_has(4);
    }
    
    /**
     * Clear <os> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearOs(){
      return $this->_clear(4);
    }
    
    /**
     * Get <os> value
     *
     * @return string
     */
    public function getOs(){
      return $this->_get(4);
    }
    
    /**
     * Set <os> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setOs( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <os_version> has a value
     *
     * @return boolean
     */
    public function hasOsVersion(){
      return $this->_has(5);
    }
    
    /**
     * Clear <os_version> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearOsVersion(){
      return $this->_clear(5);
    }
    
    /**
     * Get <os_version> value
     *
     * @return string
     */
    public function getOsVersion(){
      return $this->_get(5);
    }
    
    /**
     * Set <os_version> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setOsVersion( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <network> has a value
     *
     * @return boolean
     */
    public function hasNetwork(){
      return $this->_has(6);
    }
    
    /**
     * Clear <network> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearNetwork(){
      return $this->_clear(6);
    }
    
    /**
     * Get <network> value
     *
     * @return int
     */
    public function getNetwork(){
      return $this->_get(6);
    }
    
    /**
     * Set <network> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setNetwork( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <operator> has a value
     *
     * @return boolean
     */
    public function hasOperator(){
      return $this->_has(7);
    }
    
    /**
     * Clear <operator> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearOperator(){
      return $this->_clear(7);
    }
    
    /**
     * Get <operator> value
     *
     * @return int
     */
    public function getOperator(){
      return $this->_get(7);
    }
    
    /**
     * Set <operator> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setOperator( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <longitude> has a value
     *
     * @return boolean
     */
    public function hasLongitude(){
      return $this->_has(8);
    }
    
    /**
     * Clear <longitude> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearLongitude(){
      return $this->_clear(8);
    }
    
    /**
     * Get <longitude> value
     *
     * @return string
     */
    public function getLongitude(){
      return $this->_get(8);
    }
    
    /**
     * Set <longitude> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setLongitude( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <latitude> has a value
     *
     * @return boolean
     */
    public function hasLatitude(){
      return $this->_has(9);
    }
    
    /**
     * Clear <latitude> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearLatitude(){
      return $this->_clear(9);
    }
    
    /**
     * Get <latitude> value
     *
     * @return string
     */
    public function getLatitude(){
      return $this->_get(9);
    }
    
    /**
     * Set <latitude> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setLatitude( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <device_size> has a value
     *
     * @return boolean
     */
    public function hasDeviceSize(){
      return $this->_has(10);
    }
    
    /**
     * Clear <device_size> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearDeviceSize(){
      return $this->_clear(10);
    }
    
    /**
     * Get <device_size> value
     *
     * @return string
     */
    public function getDeviceSize(){
      return $this->_get(10);
    }
    
    /**
     * Set <device_size> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setDeviceSize( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <device_id> has a value
     *
     * @return boolean
     */
    public function hasDeviceId(){
      return $this->_has(11);
    }
    
    /**
     * Clear <device_id> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearDeviceId(){
      return $this->_clear(11);
    }
    
    /**
     * Get <device_id> value
     *
     * @return string
     */
    public function getDeviceId(){
      return $this->_get(11);
    }
    
    /**
     * Set <device_id> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setDeviceId( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <device_pixel_ratio> has a value
     *
     * @return boolean
     */
    public function hasDevicePixelRatio(){
      return $this->_has(12);
    }
    
    /**
     * Clear <device_pixel_ratio> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function clearDevicePixelRatio(){
      return $this->_clear(12);
    }
    
    /**
     * Get <device_pixel_ratio> value
     *
     * @return int
     */
    public function getDevicePixelRatio(){
      return $this->_get(12);
    }
    
    /**
     * Set <device_pixel_ratio> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function setDevicePixelRatio( $value){
      return $this->_set(12, $value);
    }
  }
}

namespace Tanx\BidRequest {

  class Mobile extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $is_app = null;
    
    /**  @var int */
    public $ad_num = null;
    
    /**  @var string[]  */
    public $ad_keyword = array();
    
    /**  @var boolean */
    public $is_fullscreen = null;
    
    /**  @var string */
    public $package_name = null;
    
    /**  @var \Tanx\BidRequest\Mobile\Device */
    public $device = null;
    
    /**  @var string[]  */
    public $native_template_id = array();
    
    /**  @var int[]  */
    public $landing_type = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.Mobile');

      // OPTIONAL BOOL is_app = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "is_app";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 ad_num = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ad_num";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING ad_keyword = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ad_keyword";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_fullscreen = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "is_fullscreen";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING package_name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "package_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE device = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "device";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Tanx\BidRequest\Mobile\Device';
      $descriptor->addField($f);

      // REPEATED STRING native_template_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "native_template_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED INT32 landing_type = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "landing_type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <is_app> has a value
     *
     * @return boolean
     */
    public function hasIsApp(){
      return $this->_has(1);
    }
    
    /**
     * Clear <is_app> value
     *
     * @return \Tanx\BidRequest\Mobile
     */
    public function clearIsApp(){
      return $this->_clear(1);
    }
    
    /**
     * Get <is_app> value
     *
     * @return boolean
     */
    public function getIsApp(){
      return $this->_get(1);
    }
    
    /**
     * Set <is_app> value
     *
     * @param boolean $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function setIsApp( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ad_num> has a value
     *
     * @return boolean
     */
    public function hasAdNum(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ad_num> value
     *
     * @return \Tanx\BidRequest\Mobile
     */
    public function clearAdNum(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ad_num> value
     *
     * @return int
     */
    public function getAdNum(){
      return $this->_get(2);
    }
    
    /**
     * Set <ad_num> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function setAdNum( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ad_keyword> has a value
     *
     * @return boolean
     */
    public function hasAdKeyword(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ad_keyword> value
     *
     * @return \Tanx\BidRequest\Mobile
     */
    public function clearAdKeyword(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ad_keyword> value
     *
     * @param int $idx
     * @return string
     */
    public function getAdKeyword($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <ad_keyword> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function setAdKeyword( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <ad_keyword>
     *
     * @return string[]
     */
    public function getAdKeywordList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <ad_keyword>
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function addAdKeyword( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <is_fullscreen> has a value
     *
     * @return boolean
     */
    public function hasIsFullscreen(){
      return $this->_has(4);
    }
    
    /**
     * Clear <is_fullscreen> value
     *
     * @return \Tanx\BidRequest\Mobile
     */
    public function clearIsFullscreen(){
      return $this->_clear(4);
    }
    
    /**
     * Get <is_fullscreen> value
     *
     * @return boolean
     */
    public function getIsFullscreen(){
      return $this->_get(4);
    }
    
    /**
     * Set <is_fullscreen> value
     *
     * @param boolean $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function setIsFullscreen( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <package_name> has a value
     *
     * @return boolean
     */
    public function hasPackageName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <package_name> value
     *
     * @return \Tanx\BidRequest\Mobile
     */
    public function clearPackageName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <package_name> value
     *
     * @return string
     */
    public function getPackageName(){
      return $this->_get(5);
    }
    
    /**
     * Set <package_name> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function setPackageName( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <device> has a value
     *
     * @return boolean
     */
    public function hasDevice(){
      return $this->_has(6);
    }
    
    /**
     * Clear <device> value
     *
     * @return \Tanx\BidRequest\Mobile
     */
    public function clearDevice(){
      return $this->_clear(6);
    }
    
    /**
     * Get <device> value
     *
     * @return \Tanx\BidRequest\Mobile\Device
     */
    public function getDevice(){
      return $this->_get(6);
    }
    
    /**
     * Set <device> value
     *
     * @param \Tanx\BidRequest\Mobile\Device $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function setDevice(\Tanx\BidRequest\Mobile\Device $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <native_template_id> has a value
     *
     * @return boolean
     */
    public function hasNativeTemplateId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <native_template_id> value
     *
     * @return \Tanx\BidRequest\Mobile
     */
    public function clearNativeTemplateId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <native_template_id> value
     *
     * @param int $idx
     * @return string
     */
    public function getNativeTemplateId($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <native_template_id> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function setNativeTemplateId( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <native_template_id>
     *
     * @return string[]
     */
    public function getNativeTemplateIdList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <native_template_id>
     *
     * @param string $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function addNativeTemplateId( $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <landing_type> has a value
     *
     * @return boolean
     */
    public function hasLandingType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <landing_type> value
     *
     * @return \Tanx\BidRequest\Mobile
     */
    public function clearLandingType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <landing_type> value
     *
     * @param int $idx
     * @return int
     */
    public function getLandingType($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <landing_type> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function setLandingType( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <landing_type>
     *
     * @return int[]
     */
    public function getLandingTypeList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <landing_type>
     *
     * @param int $value
     * @return \Tanx\BidRequest\Mobile
     */
    public function addLandingType( $value){
     return $this->_add(8, $value);
    }
  }
}

namespace Tanx\BidRequest {

  class ContentCategory extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $confidence_level = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.ContentCategory');

      // REQUIRED INT32 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 confidence_level = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "confidence_level";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \Tanx\BidRequest\ContentCategory
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\ContentCategory
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <confidence_level> has a value
     *
     * @return boolean
     */
    public function hasConfidenceLevel(){
      return $this->_has(2);
    }
    
    /**
     * Clear <confidence_level> value
     *
     * @return \Tanx\BidRequest\ContentCategory
     */
    public function clearConfidenceLevel(){
      return $this->_clear(2);
    }
    
    /**
     * Get <confidence_level> value
     *
     * @return int
     */
    public function getConfidenceLevel(){
      return $this->_get(2);
    }
    
    /**
     * Set <confidence_level> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\ContentCategory
     */
    public function setConfidenceLevel( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Tanx\BidRequest\Video {

  class VideoFormat extends \DrSlump\Protobuf\Enum {
    const VIDEO_FLASH = 0;
    const VIDEO_HTML5 = 1;
  }
}
namespace Tanx\BidRequest\Video {

  class Content extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $title = null;
    
    /**  @var int */
    public $duration = null;
    
    /**  @var string[]  */
    public $keywords = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.Video.Content');

      // OPTIONAL STRING title = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 duration = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "duration";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING keywords = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "keywords";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(1);
    }
    
    /**
     * Clear <title> value
     *
     * @return \Tanx\BidRequest\Video\Content
     */
    public function clearTitle(){
      return $this->_clear(1);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(1);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Video\Content
     */
    public function setTitle( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <duration> has a value
     *
     * @return boolean
     */
    public function hasDuration(){
      return $this->_has(2);
    }
    
    /**
     * Clear <duration> value
     *
     * @return \Tanx\BidRequest\Video\Content
     */
    public function clearDuration(){
      return $this->_clear(2);
    }
    
    /**
     * Get <duration> value
     *
     * @return int
     */
    public function getDuration(){
      return $this->_get(2);
    }
    
    /**
     * Set <duration> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Video\Content
     */
    public function setDuration( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <keywords> has a value
     *
     * @return boolean
     */
    public function hasKeywords(){
      return $this->_has(3);
    }
    
    /**
     * Clear <keywords> value
     *
     * @return \Tanx\BidRequest\Video\Content
     */
    public function clearKeywords(){
      return $this->_clear(3);
    }
    
    /**
     * Get <keywords> value
     *
     * @param int $idx
     * @return string
     */
    public function getKeywords($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <keywords> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Video\Content
     */
    public function setKeywords( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <keywords>
     *
     * @return string[]
     */
    public function getKeywordsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <keywords>
     *
     * @param string $value
     * @return \Tanx\BidRequest\Video\Content
     */
    public function addKeywords( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Tanx\BidRequest {

  class Video extends \DrSlump\Protobuf\Message {

    /**  @var int - \Tanx\BidRequest\Video\VideoFormat[]  */
    public $video_format = array();
    
    /**  @var \Tanx\BidRequest\Video\Content */
    public $content = null;
    
    /**  @var int */
    public $videoad_start_delay = null;
    
    /**  @var int */
    public $videoad_section_start_delay = null;
    
    /**  @var int */
    public $min_ad_duration = null;
    
    /**  @var int */
    public $max_ad_duration = null;
    
    /**  @var string */
    public $protocol = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.Video');

      // REPEATED ENUM video_format = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "video_format";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\BidRequest\Video\VideoFormat';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE content = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Tanx\BidRequest\Video\Content';
      $descriptor->addField($f);

      // OPTIONAL INT32 videoad_start_delay = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "videoad_start_delay";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 videoad_section_start_delay = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "videoad_section_start_delay";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 min_ad_duration = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "min_ad_duration";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 max_ad_duration = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "max_ad_duration";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING protocol = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "protocol";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <video_format> has a value
     *
     * @return boolean
     */
    public function hasVideoFormat(){
      return $this->_has(1);
    }
    
    /**
     * Clear <video_format> value
     *
     * @return \Tanx\BidRequest\Video
     */
    public function clearVideoFormat(){
      return $this->_clear(1);
    }
    
    /**
     * Get <video_format> value
     *
     * @param int $idx
     * @return int - \Tanx\BidRequest\Video\VideoFormat
     */
    public function getVideoFormat($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <video_format> value
     *
     * @param int - \Tanx\BidRequest\Video\VideoFormat $value
     * @return \Tanx\BidRequest\Video
     */
    public function setVideoFormat( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <video_format>
     *
     * @return int - \Tanx\BidRequest\Video\VideoFormat[]
     */
    public function getVideoFormatList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <video_format>
     *
     * @param int - \Tanx\BidRequest\Video\VideoFormat $value
     * @return \Tanx\BidRequest\Video
     */
    public function addVideoFormat( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <content> value
     *
     * @return \Tanx\BidRequest\Video
     */
    public function clearContent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <content> value
     *
     * @return \Tanx\BidRequest\Video\Content
     */
    public function getContent(){
      return $this->_get(2);
    }
    
    /**
     * Set <content> value
     *
     * @param \Tanx\BidRequest\Video\Content $value
     * @return \Tanx\BidRequest\Video
     */
    public function setContent(\Tanx\BidRequest\Video\Content $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <videoad_start_delay> has a value
     *
     * @return boolean
     */
    public function hasVideoadStartDelay(){
      return $this->_has(3);
    }
    
    /**
     * Clear <videoad_start_delay> value
     *
     * @return \Tanx\BidRequest\Video
     */
    public function clearVideoadStartDelay(){
      return $this->_clear(3);
    }
    
    /**
     * Get <videoad_start_delay> value
     *
     * @return int
     */
    public function getVideoadStartDelay(){
      return $this->_get(3);
    }
    
    /**
     * Set <videoad_start_delay> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Video
     */
    public function setVideoadStartDelay( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <videoad_section_start_delay> has a value
     *
     * @return boolean
     */
    public function hasVideoadSectionStartDelay(){
      return $this->_has(4);
    }
    
    /**
     * Clear <videoad_section_start_delay> value
     *
     * @return \Tanx\BidRequest\Video
     */
    public function clearVideoadSectionStartDelay(){
      return $this->_clear(4);
    }
    
    /**
     * Get <videoad_section_start_delay> value
     *
     * @return int
     */
    public function getVideoadSectionStartDelay(){
      return $this->_get(4);
    }
    
    /**
     * Set <videoad_section_start_delay> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Video
     */
    public function setVideoadSectionStartDelay( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <min_ad_duration> has a value
     *
     * @return boolean
     */
    public function hasMinAdDuration(){
      return $this->_has(5);
    }
    
    /**
     * Clear <min_ad_duration> value
     *
     * @return \Tanx\BidRequest\Video
     */
    public function clearMinAdDuration(){
      return $this->_clear(5);
    }
    
    /**
     * Get <min_ad_duration> value
     *
     * @return int
     */
    public function getMinAdDuration(){
      return $this->_get(5);
    }
    
    /**
     * Set <min_ad_duration> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Video
     */
    public function setMinAdDuration( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <max_ad_duration> has a value
     *
     * @return boolean
     */
    public function hasMaxAdDuration(){
      return $this->_has(6);
    }
    
    /**
     * Clear <max_ad_duration> value
     *
     * @return \Tanx\BidRequest\Video
     */
    public function clearMaxAdDuration(){
      return $this->_clear(6);
    }
    
    /**
     * Get <max_ad_duration> value
     *
     * @return int
     */
    public function getMaxAdDuration(){
      return $this->_get(6);
    }
    
    /**
     * Set <max_ad_duration> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Video
     */
    public function setMaxAdDuration( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <protocol> has a value
     *
     * @return boolean
     */
    public function hasProtocol(){
      return $this->_has(7);
    }
    
    /**
     * Clear <protocol> value
     *
     * @return \Tanx\BidRequest\Video
     */
    public function clearProtocol(){
      return $this->_clear(7);
    }
    
    /**
     * Get <protocol> value
     *
     * @return string
     */
    public function getProtocol(){
      return $this->_get(7);
    }
    
    /**
     * Set <protocol> value
     *
     * @param string $value
     * @return \Tanx\BidRequest\Video
     */
    public function setProtocol( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace Tanx\BidRequest\Deal {

  class PreferredDeal extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $dealid = null;
    
    /**  @var int[]  */
    public $advertiser_ids = array();
    
    /**  @var int */
    public $fix_cpm_price = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.Deal.PreferredDeal');

      // REQUIRED UINT32 dealid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "dealid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED UINT32 advertiser_ids = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "advertiser_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 fix_cpm_price = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "fix_cpm_price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dealid> has a value
     *
     * @return boolean
     */
    public function hasDealid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <dealid> value
     *
     * @return \Tanx\BidRequest\Deal\PreferredDeal
     */
    public function clearDealid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <dealid> value
     *
     * @return int
     */
    public function getDealid(){
      return $this->_get(1);
    }
    
    /**
     * Set <dealid> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Deal\PreferredDeal
     */
    public function setDealid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <advertiser_ids> has a value
     *
     * @return boolean
     */
    public function hasAdvertiserIds(){
      return $this->_has(2);
    }
    
    /**
     * Clear <advertiser_ids> value
     *
     * @return \Tanx\BidRequest\Deal\PreferredDeal
     */
    public function clearAdvertiserIds(){
      return $this->_clear(2);
    }
    
    /**
     * Get <advertiser_ids> value
     *
     * @param int $idx
     * @return int
     */
    public function getAdvertiserIds($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <advertiser_ids> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Deal\PreferredDeal
     */
    public function setAdvertiserIds( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <advertiser_ids>
     *
     * @return int[]
     */
    public function getAdvertiserIdsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <advertiser_ids>
     *
     * @param int $value
     * @return \Tanx\BidRequest\Deal\PreferredDeal
     */
    public function addAdvertiserIds( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <fix_cpm_price> has a value
     *
     * @return boolean
     */
    public function hasFixCpmPrice(){
      return $this->_has(3);
    }
    
    /**
     * Clear <fix_cpm_price> value
     *
     * @return \Tanx\BidRequest\Deal\PreferredDeal
     */
    public function clearFixCpmPrice(){
      return $this->_clear(3);
    }
    
    /**
     * Get <fix_cpm_price> value
     *
     * @return int
     */
    public function getFixCpmPrice(){
      return $this->_get(3);
    }
    
    /**
     * Set <fix_cpm_price> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Deal\PreferredDeal
     */
    public function setFixCpmPrice( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace Tanx\BidRequest\Deal\PrivateAuction {

  class BuyerRule extends \DrSlump\Protobuf\Message {

    /**  @var int[]  */
    public $advertiser_ids = array();
    
    /**  @var int */
    public $min_cpm_price = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.Deal.PrivateAuction.BuyerRule');

      // REPEATED UINT32 advertiser_ids = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "advertiser_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 min_cpm_price = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "min_cpm_price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <advertiser_ids> has a value
     *
     * @return boolean
     */
    public function hasAdvertiserIds(){
      return $this->_has(1);
    }
    
    /**
     * Clear <advertiser_ids> value
     *
     * @return \Tanx\BidRequest\Deal\PrivateAuction\BuyerRule
     */
    public function clearAdvertiserIds(){
      return $this->_clear(1);
    }
    
    /**
     * Get <advertiser_ids> value
     *
     * @param int $idx
     * @return int
     */
    public function getAdvertiserIds($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <advertiser_ids> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Deal\PrivateAuction\BuyerRule
     */
    public function setAdvertiserIds( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <advertiser_ids>
     *
     * @return int[]
     */
    public function getAdvertiserIdsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <advertiser_ids>
     *
     * @param int $value
     * @return \Tanx\BidRequest\Deal\PrivateAuction\BuyerRule
     */
    public function addAdvertiserIds( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <min_cpm_price> has a value
     *
     * @return boolean
     */
    public function hasMinCpmPrice(){
      return $this->_has(2);
    }
    
    /**
     * Clear <min_cpm_price> value
     *
     * @return \Tanx\BidRequest\Deal\PrivateAuction\BuyerRule
     */
    public function clearMinCpmPrice(){
      return $this->_clear(2);
    }
    
    /**
     * Get <min_cpm_price> value
     *
     * @return int
     */
    public function getMinCpmPrice(){
      return $this->_get(2);
    }
    
    /**
     * Set <min_cpm_price> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Deal\PrivateAuction\BuyerRule
     */
    public function setMinCpmPrice( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Tanx\BidRequest\Deal {

  class PrivateAuction extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $dealid = null;
    
    /**  @var \Tanx\BidRequest\Deal\PrivateAuction\BuyerRule[]  */
    public $buyer_rules = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.Deal.PrivateAuction');

      // REQUIRED UINT32 dealid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "dealid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE buyer_rules = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "buyer_rules";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\BidRequest\Deal\PrivateAuction\BuyerRule';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dealid> has a value
     *
     * @return boolean
     */
    public function hasDealid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <dealid> value
     *
     * @return \Tanx\BidRequest\Deal\PrivateAuction
     */
    public function clearDealid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <dealid> value
     *
     * @return int
     */
    public function getDealid(){
      return $this->_get(1);
    }
    
    /**
     * Set <dealid> value
     *
     * @param int $value
     * @return \Tanx\BidRequest\Deal\PrivateAuction
     */
    public function setDealid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <buyer_rules> has a value
     *
     * @return boolean
     */
    public function hasBuyerRules(){
      return $this->_has(2);
    }
    
    /**
     * Clear <buyer_rules> value
     *
     * @return \Tanx\BidRequest\Deal\PrivateAuction
     */
    public function clearBuyerRules(){
      return $this->_clear(2);
    }
    
    /**
     * Get <buyer_rules> value
     *
     * @param int $idx
     * @return \Tanx\BidRequest\Deal\PrivateAuction\BuyerRule
     */
    public function getBuyerRules($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <buyer_rules> value
     *
     * @param \Tanx\BidRequest\Deal\PrivateAuction\BuyerRule $value
     * @return \Tanx\BidRequest\Deal\PrivateAuction
     */
    public function setBuyerRules(\Tanx\BidRequest\Deal\PrivateAuction\BuyerRule $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <buyer_rules>
     *
     * @return \Tanx\BidRequest\Deal\PrivateAuction\BuyerRule[]
     */
    public function getBuyerRulesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <buyer_rules>
     *
     * @param \Tanx\BidRequest\Deal\PrivateAuction\BuyerRule $value
     * @return \Tanx\BidRequest\Deal\PrivateAuction
     */
    public function addBuyerRules(\Tanx\BidRequest\Deal\PrivateAuction\BuyerRule $value){
     return $this->_add(2, $value);
    }
  }
}

namespace Tanx\BidRequest {

  class Deal extends \DrSlump\Protobuf\Message {

    /**  @var \Tanx\BidRequest\Deal\PreferredDeal */
    public $prefer_deal = null;
    
    /**  @var \Tanx\BidRequest\Deal\PrivateAuction */
    public $priv_auc = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest.Deal');

      // OPTIONAL MESSAGE prefer_deal = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "prefer_deal";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Tanx\BidRequest\Deal\PreferredDeal';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE priv_auc = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "priv_auc";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Tanx\BidRequest\Deal\PrivateAuction';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <prefer_deal> has a value
     *
     * @return boolean
     */
    public function hasPreferDeal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <prefer_deal> value
     *
     * @return \Tanx\BidRequest\Deal
     */
    public function clearPreferDeal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <prefer_deal> value
     *
     * @return \Tanx\BidRequest\Deal\PreferredDeal
     */
    public function getPreferDeal(){
      return $this->_get(1);
    }
    
    /**
     * Set <prefer_deal> value
     *
     * @param \Tanx\BidRequest\Deal\PreferredDeal $value
     * @return \Tanx\BidRequest\Deal
     */
    public function setPreferDeal(\Tanx\BidRequest\Deal\PreferredDeal $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <priv_auc> has a value
     *
     * @return boolean
     */
    public function hasPrivAuc(){
      return $this->_has(2);
    }
    
    /**
     * Clear <priv_auc> value
     *
     * @return \Tanx\BidRequest\Deal
     */
    public function clearPrivAuc(){
      return $this->_clear(2);
    }
    
    /**
     * Get <priv_auc> value
     *
     * @return \Tanx\BidRequest\Deal\PrivateAuction
     */
    public function getPrivAuc(){
      return $this->_get(2);
    }
    
    /**
     * Set <priv_auc> value
     *
     * @param \Tanx\BidRequest\Deal\PrivateAuction $value
     * @return \Tanx\BidRequest\Deal
     */
    public function setPrivAuc(\Tanx\BidRequest\Deal\PrivateAuction $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Tanx {

  class BidRequest extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $version = null;
    
    /**  @var string */
    public $bid = null;
    
    /**  @var int */
    public $is_test = 0;
    
    /**  @var int */
    public $is_ping = 0;
    
    /**  @var string */
    public $tid = null;
    
    /**  @var string */
    public $ip = null;
    
    /**  @var string */
    public $user_agent = null;
    
    /**  @var int */
    public $timezone_offset = null;
    
    /**  @var int[]  */
    public $user_vertical = array();
    
    /**  @var int */
    public $tid_version = null;
    
    /**  @var string[]  */
    public $excluded_click_through_url = array();
    
    /**  @var string */
    public $url = null;
    
    /**  @var int */
    public $category = null;
    
    /**  @var int */
    public $adx_type = 0;
    
    /**  @var string */
    public $anonymous_id = null;
    
    /**  @var string */
    public $detected_language = null;
    
    /**  @var int */
    public $category_version = null;
    
    /**  @var \Tanx\BidRequest\AdzInfo[]  */
    public $adzinfo = array();
    
    /**  @var int[]  */
    public $excluded_sensitive_category = array();
    
    /**  @var int[]  */
    public $excluded_ad_category = array();
    
    /**  @var string */
    public $hosted_match_data = null;
    
    /**  @var \Tanx\BidRequest\UserAttribute[]  */
    public $user_attribute = array();
    
    /**  @var string */
    public $page_session_id = null;
    
    /**  @var \Tanx\BidRequest\PrivateInfo[]  */
    public $private_info = array();
    
    /**  @var \Tanx\BidRequest\Mobile */
    public $mobile = null;
    
    /**  @var \Tanx\BidRequest\ContentCategory[]  */
    public $content_categories = array();
    
    /**  @var \Tanx\BidRequest\Video */
    public $video = null;
    
    /**  @var string */
    public $aid = null;
    
    /**  @var \Tanx\BidRequest\Deal[]  */
    public $deals = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidRequest');

      // REQUIRED INT32 version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING bid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 is_test = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "is_test";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 is_ping = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "is_ping";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING tid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "tid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ip = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "ip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING user_agent = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "user_agent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 timezone_offset = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "timezone_offset";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED INT32 user_vertical = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "user_vertical";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 tid_version = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "tid_version";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING excluded_click_through_url = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "excluded_click_through_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING url = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 category = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "category";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 adx_type = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "adx_type";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL STRING anonymous_id = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "anonymous_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING detected_language = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "detected_language";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 category_version = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "category_version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE adzinfo = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "adzinfo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\BidRequest\AdzInfo';
      $descriptor->addField($f);

      // REPEATED INT32 excluded_sensitive_category = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "excluded_sensitive_category";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED INT32 excluded_ad_category = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "excluded_ad_category";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING hosted_match_data = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "hosted_match_data";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE user_attribute = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "user_attribute";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\BidRequest\UserAttribute';
      $descriptor->addField($f);

      // OPTIONAL STRING page_session_id = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "page_session_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE private_info = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "private_info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\BidRequest\PrivateInfo';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE mobile = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Tanx\BidRequest\Mobile';
      $descriptor->addField($f);

      // REPEATED MESSAGE content_categories = 26
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 26;
      $f->name      = "content_categories";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\BidRequest\ContentCategory';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE video = 27
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 27;
      $f->name      = "video";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Tanx\BidRequest\Video';
      $descriptor->addField($f);

      // OPTIONAL STRING aid = 28
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 28;
      $f->name      = "aid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE deals = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "deals";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\BidRequest\Deal';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <version> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bid> has a value
     *
     * @return boolean
     */
    public function hasBid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bid> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearBid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bid> value
     *
     * @return string
     */
    public function getBid(){
      return $this->_get(2);
    }
    
    /**
     * Set <bid> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setBid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <is_test> has a value
     *
     * @return boolean
     */
    public function hasIsTest(){
      return $this->_has(11);
    }
    
    /**
     * Clear <is_test> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearIsTest(){
      return $this->_clear(11);
    }
    
    /**
     * Get <is_test> value
     *
     * @return int
     */
    public function getIsTest(){
      return $this->_get(11);
    }
    
    /**
     * Set <is_test> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setIsTest( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <is_ping> has a value
     *
     * @return boolean
     */
    public function hasIsPing(){
      return $this->_has(12);
    }
    
    /**
     * Clear <is_ping> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearIsPing(){
      return $this->_clear(12);
    }
    
    /**
     * Get <is_ping> value
     *
     * @return int
     */
    public function getIsPing(){
      return $this->_get(12);
    }
    
    /**
     * Set <is_ping> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setIsPing( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <tid> has a value
     *
     * @return boolean
     */
    public function hasTid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <tid> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearTid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <tid> value
     *
     * @return string
     */
    public function getTid(){
      return $this->_get(3);
    }
    
    /**
     * Set <tid> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setTid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <ip> has a value
     *
     * @return boolean
     */
    public function hasIp(){
      return $this->_has(4);
    }
    
    /**
     * Clear <ip> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearIp(){
      return $this->_clear(4);
    }
    
    /**
     * Get <ip> value
     *
     * @return string
     */
    public function getIp(){
      return $this->_get(4);
    }
    
    /**
     * Set <ip> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setIp( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <user_agent> has a value
     *
     * @return boolean
     */
    public function hasUserAgent(){
      return $this->_has(5);
    }
    
    /**
     * Clear <user_agent> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearUserAgent(){
      return $this->_clear(5);
    }
    
    /**
     * Get <user_agent> value
     *
     * @return string
     */
    public function getUserAgent(){
      return $this->_get(5);
    }
    
    /**
     * Set <user_agent> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setUserAgent( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <timezone_offset> has a value
     *
     * @return boolean
     */
    public function hasTimezoneOffset(){
      return $this->_has(13);
    }
    
    /**
     * Clear <timezone_offset> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearTimezoneOffset(){
      return $this->_clear(13);
    }
    
    /**
     * Get <timezone_offset> value
     *
     * @return int
     */
    public function getTimezoneOffset(){
      return $this->_get(13);
    }
    
    /**
     * Set <timezone_offset> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setTimezoneOffset( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <user_vertical> has a value
     *
     * @return boolean
     */
    public function hasUserVertical(){
      return $this->_has(14);
    }
    
    /**
     * Clear <user_vertical> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearUserVertical(){
      return $this->_clear(14);
    }
    
    /**
     * Get <user_vertical> value
     *
     * @param int $idx
     * @return int
     */
    public function getUserVertical($idx = NULL){
      return $this->_get(14, $idx);
    }
    
    /**
     * Set <user_vertical> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setUserVertical( $value, $idx = NULL){
      return $this->_set(14, $value, $idx);
    }
    
    /**
     * Get all elements of <user_vertical>
     *
     * @return int[]
     */
    public function getUserVerticalList(){
     return $this->_get(14);
    }
    
    /**
     * Add a new element to <user_vertical>
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function addUserVertical( $value){
     return $this->_add(14, $value);
    }
    
    /**
     * Check if <tid_version> has a value
     *
     * @return boolean
     */
    public function hasTidVersion(){
      return $this->_has(19);
    }
    
    /**
     * Clear <tid_version> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearTidVersion(){
      return $this->_clear(19);
    }
    
    /**
     * Get <tid_version> value
     *
     * @return int
     */
    public function getTidVersion(){
      return $this->_get(19);
    }
    
    /**
     * Set <tid_version> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setTidVersion( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <excluded_click_through_url> has a value
     *
     * @return boolean
     */
    public function hasExcludedClickThroughUrl(){
      return $this->_has(6);
    }
    
    /**
     * Clear <excluded_click_through_url> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearExcludedClickThroughUrl(){
      return $this->_clear(6);
    }
    
    /**
     * Get <excluded_click_through_url> value
     *
     * @param int $idx
     * @return string
     */
    public function getExcludedClickThroughUrl($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <excluded_click_through_url> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setExcludedClickThroughUrl( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <excluded_click_through_url>
     *
     * @return string[]
     */
    public function getExcludedClickThroughUrlList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <excluded_click_through_url>
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function addExcludedClickThroughUrl( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(7);
    }
    
    /**
     * Clear <url> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearUrl(){
      return $this->_clear(7);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(7);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setUrl( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <category> has a value
     *
     * @return boolean
     */
    public function hasCategory(){
      return $this->_has(8);
    }
    
    /**
     * Clear <category> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearCategory(){
      return $this->_clear(8);
    }
    
    /**
     * Get <category> value
     *
     * @return int
     */
    public function getCategory(){
      return $this->_get(8);
    }
    
    /**
     * Set <category> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setCategory( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <adx_type> has a value
     *
     * @return boolean
     */
    public function hasAdxType(){
      return $this->_has(9);
    }
    
    /**
     * Clear <adx_type> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearAdxType(){
      return $this->_clear(9);
    }
    
    /**
     * Get <adx_type> value
     *
     * @return int
     */
    public function getAdxType(){
      return $this->_get(9);
    }
    
    /**
     * Set <adx_type> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setAdxType( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <anonymous_id> has a value
     *
     * @return boolean
     */
    public function hasAnonymousId(){
      return $this->_has(15);
    }
    
    /**
     * Clear <anonymous_id> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearAnonymousId(){
      return $this->_clear(15);
    }
    
    /**
     * Get <anonymous_id> value
     *
     * @return string
     */
    public function getAnonymousId(){
      return $this->_get(15);
    }
    
    /**
     * Set <anonymous_id> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setAnonymousId( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <detected_language> has a value
     *
     * @return boolean
     */
    public function hasDetectedLanguage(){
      return $this->_has(16);
    }
    
    /**
     * Clear <detected_language> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearDetectedLanguage(){
      return $this->_clear(16);
    }
    
    /**
     * Get <detected_language> value
     *
     * @return string
     */
    public function getDetectedLanguage(){
      return $this->_get(16);
    }
    
    /**
     * Set <detected_language> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setDetectedLanguage( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <category_version> has a value
     *
     * @return boolean
     */
    public function hasCategoryVersion(){
      return $this->_has(18);
    }
    
    /**
     * Clear <category_version> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearCategoryVersion(){
      return $this->_clear(18);
    }
    
    /**
     * Get <category_version> value
     *
     * @return int
     */
    public function getCategoryVersion(){
      return $this->_get(18);
    }
    
    /**
     * Set <category_version> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setCategoryVersion( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <adzinfo> has a value
     *
     * @return boolean
     */
    public function hasAdzinfo(){
      return $this->_has(10);
    }
    
    /**
     * Clear <adzinfo> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearAdzinfo(){
      return $this->_clear(10);
    }
    
    /**
     * Get <adzinfo> value
     *
     * @param int $idx
     * @return \Tanx\BidRequest\AdzInfo
     */
    public function getAdzinfo($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <adzinfo> value
     *
     * @param \Tanx\BidRequest\AdzInfo $value
     * @return \Tanx\BidRequest
     */
    public function setAdzinfo(\Tanx\BidRequest\AdzInfo $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <adzinfo>
     *
     * @return \Tanx\BidRequest\AdzInfo[]
     */
    public function getAdzinfoList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <adzinfo>
     *
     * @param \Tanx\BidRequest\AdzInfo $value
     * @return \Tanx\BidRequest
     */
    public function addAdzinfo(\Tanx\BidRequest\AdzInfo $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <excluded_sensitive_category> has a value
     *
     * @return boolean
     */
    public function hasExcludedSensitiveCategory(){
      return $this->_has(17);
    }
    
    /**
     * Clear <excluded_sensitive_category> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearExcludedSensitiveCategory(){
      return $this->_clear(17);
    }
    
    /**
     * Get <excluded_sensitive_category> value
     *
     * @param int $idx
     * @return int
     */
    public function getExcludedSensitiveCategory($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <excluded_sensitive_category> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setExcludedSensitiveCategory( $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <excluded_sensitive_category>
     *
     * @return int[]
     */
    public function getExcludedSensitiveCategoryList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <excluded_sensitive_category>
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function addExcludedSensitiveCategory( $value){
     return $this->_add(17, $value);
    }
    
    /**
     * Check if <excluded_ad_category> has a value
     *
     * @return boolean
     */
    public function hasExcludedAdCategory(){
      return $this->_has(20);
    }
    
    /**
     * Clear <excluded_ad_category> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearExcludedAdCategory(){
      return $this->_clear(20);
    }
    
    /**
     * Get <excluded_ad_category> value
     *
     * @param int $idx
     * @return int
     */
    public function getExcludedAdCategory($idx = NULL){
      return $this->_get(20, $idx);
    }
    
    /**
     * Set <excluded_ad_category> value
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function setExcludedAdCategory( $value, $idx = NULL){
      return $this->_set(20, $value, $idx);
    }
    
    /**
     * Get all elements of <excluded_ad_category>
     *
     * @return int[]
     */
    public function getExcludedAdCategoryList(){
     return $this->_get(20);
    }
    
    /**
     * Add a new element to <excluded_ad_category>
     *
     * @param int $value
     * @return \Tanx\BidRequest
     */
    public function addExcludedAdCategory( $value){
     return $this->_add(20, $value);
    }
    
    /**
     * Check if <hosted_match_data> has a value
     *
     * @return boolean
     */
    public function hasHostedMatchData(){
      return $this->_has(21);
    }
    
    /**
     * Clear <hosted_match_data> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearHostedMatchData(){
      return $this->_clear(21);
    }
    
    /**
     * Get <hosted_match_data> value
     *
     * @return string
     */
    public function getHostedMatchData(){
      return $this->_get(21);
    }
    
    /**
     * Set <hosted_match_data> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setHostedMatchData( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <user_attribute> has a value
     *
     * @return boolean
     */
    public function hasUserAttribute(){
      return $this->_has(22);
    }
    
    /**
     * Clear <user_attribute> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearUserAttribute(){
      return $this->_clear(22);
    }
    
    /**
     * Get <user_attribute> value
     *
     * @param int $idx
     * @return \Tanx\BidRequest\UserAttribute
     */
    public function getUserAttribute($idx = NULL){
      return $this->_get(22, $idx);
    }
    
    /**
     * Set <user_attribute> value
     *
     * @param \Tanx\BidRequest\UserAttribute $value
     * @return \Tanx\BidRequest
     */
    public function setUserAttribute(\Tanx\BidRequest\UserAttribute $value, $idx = NULL){
      return $this->_set(22, $value, $idx);
    }
    
    /**
     * Get all elements of <user_attribute>
     *
     * @return \Tanx\BidRequest\UserAttribute[]
     */
    public function getUserAttributeList(){
     return $this->_get(22);
    }
    
    /**
     * Add a new element to <user_attribute>
     *
     * @param \Tanx\BidRequest\UserAttribute $value
     * @return \Tanx\BidRequest
     */
    public function addUserAttribute(\Tanx\BidRequest\UserAttribute $value){
     return $this->_add(22, $value);
    }
    
    /**
     * Check if <page_session_id> has a value
     *
     * @return boolean
     */
    public function hasPageSessionId(){
      return $this->_has(23);
    }
    
    /**
     * Clear <page_session_id> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearPageSessionId(){
      return $this->_clear(23);
    }
    
    /**
     * Get <page_session_id> value
     *
     * @return string
     */
    public function getPageSessionId(){
      return $this->_get(23);
    }
    
    /**
     * Set <page_session_id> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setPageSessionId( $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <private_info> has a value
     *
     * @return boolean
     */
    public function hasPrivateInfo(){
      return $this->_has(24);
    }
    
    /**
     * Clear <private_info> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearPrivateInfo(){
      return $this->_clear(24);
    }
    
    /**
     * Get <private_info> value
     *
     * @param int $idx
     * @return \Tanx\BidRequest\PrivateInfo
     */
    public function getPrivateInfo($idx = NULL){
      return $this->_get(24, $idx);
    }
    
    /**
     * Set <private_info> value
     *
     * @param \Tanx\BidRequest\PrivateInfo $value
     * @return \Tanx\BidRequest
     */
    public function setPrivateInfo(\Tanx\BidRequest\PrivateInfo $value, $idx = NULL){
      return $this->_set(24, $value, $idx);
    }
    
    /**
     * Get all elements of <private_info>
     *
     * @return \Tanx\BidRequest\PrivateInfo[]
     */
    public function getPrivateInfoList(){
     return $this->_get(24);
    }
    
    /**
     * Add a new element to <private_info>
     *
     * @param \Tanx\BidRequest\PrivateInfo $value
     * @return \Tanx\BidRequest
     */
    public function addPrivateInfo(\Tanx\BidRequest\PrivateInfo $value){
     return $this->_add(24, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(25);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearMobile(){
      return $this->_clear(25);
    }
    
    /**
     * Get <mobile> value
     *
     * @return \Tanx\BidRequest\Mobile
     */
    public function getMobile(){
      return $this->_get(25);
    }
    
    /**
     * Set <mobile> value
     *
     * @param \Tanx\BidRequest\Mobile $value
     * @return \Tanx\BidRequest
     */
    public function setMobile(\Tanx\BidRequest\Mobile $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <content_categories> has a value
     *
     * @return boolean
     */
    public function hasContentCategories(){
      return $this->_has(26);
    }
    
    /**
     * Clear <content_categories> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearContentCategories(){
      return $this->_clear(26);
    }
    
    /**
     * Get <content_categories> value
     *
     * @param int $idx
     * @return \Tanx\BidRequest\ContentCategory
     */
    public function getContentCategories($idx = NULL){
      return $this->_get(26, $idx);
    }
    
    /**
     * Set <content_categories> value
     *
     * @param \Tanx\BidRequest\ContentCategory $value
     * @return \Tanx\BidRequest
     */
    public function setContentCategories(\Tanx\BidRequest\ContentCategory $value, $idx = NULL){
      return $this->_set(26, $value, $idx);
    }
    
    /**
     * Get all elements of <content_categories>
     *
     * @return \Tanx\BidRequest\ContentCategory[]
     */
    public function getContentCategoriesList(){
     return $this->_get(26);
    }
    
    /**
     * Add a new element to <content_categories>
     *
     * @param \Tanx\BidRequest\ContentCategory $value
     * @return \Tanx\BidRequest
     */
    public function addContentCategories(\Tanx\BidRequest\ContentCategory $value){
     return $this->_add(26, $value);
    }
    
    /**
     * Check if <video> has a value
     *
     * @return boolean
     */
    public function hasVideo(){
      return $this->_has(27);
    }
    
    /**
     * Clear <video> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearVideo(){
      return $this->_clear(27);
    }
    
    /**
     * Get <video> value
     *
     * @return \Tanx\BidRequest\Video
     */
    public function getVideo(){
      return $this->_get(27);
    }
    
    /**
     * Set <video> value
     *
     * @param \Tanx\BidRequest\Video $value
     * @return \Tanx\BidRequest
     */
    public function setVideo(\Tanx\BidRequest\Video $value){
      return $this->_set(27, $value);
    }
    
    /**
     * Check if <aid> has a value
     *
     * @return boolean
     */
    public function hasAid(){
      return $this->_has(28);
    }
    
    /**
     * Clear <aid> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearAid(){
      return $this->_clear(28);
    }
    
    /**
     * Get <aid> value
     *
     * @return string
     */
    public function getAid(){
      return $this->_get(28);
    }
    
    /**
     * Set <aid> value
     *
     * @param string $value
     * @return \Tanx\BidRequest
     */
    public function setAid( $value){
      return $this->_set(28, $value);
    }
    
    /**
     * Check if <deals> has a value
     *
     * @return boolean
     */
    public function hasDeals(){
      return $this->_has(29);
    }
    
    /**
     * Clear <deals> value
     *
     * @return \Tanx\BidRequest
     */
    public function clearDeals(){
      return $this->_clear(29);
    }
    
    /**
     * Get <deals> value
     *
     * @param int $idx
     * @return \Tanx\BidRequest\Deal
     */
    public function getDeals($idx = NULL){
      return $this->_get(29, $idx);
    }
    
    /**
     * Set <deals> value
     *
     * @param \Tanx\BidRequest\Deal $value
     * @return \Tanx\BidRequest
     */
    public function setDeals(\Tanx\BidRequest\Deal $value, $idx = NULL){
      return $this->_set(29, $value, $idx);
    }
    
    /**
     * Get all elements of <deals>
     *
     * @return \Tanx\BidRequest\Deal[]
     */
    public function getDealsList(){
     return $this->_get(29);
    }
    
    /**
     * Add a new element to <deals>
     *
     * @param \Tanx\BidRequest\Deal $value
     * @return \Tanx\BidRequest
     */
    public function addDeals(\Tanx\BidRequest\Deal $value){
     return $this->_add(29, $value);
    }
  }
}

namespace Tanx\BidResponse {

  class Ads extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $adzinfo_id = null;
    
    /**  @var int */
    public $max_cpm_price = null;
    
    /**  @var int */
    public $ad_bid_count_idx = null;
    
    /**  @var string */
    public $html_snippet = null;
    
    /**  @var string[]  */
    public $click_through_url = array();
    
    /**  @var int[]  */
    public $category = array();
    
    /**  @var int[]  */
    public $creative_type = array();
    
    /**  @var string */
    public $network_guid = null;
    
    /**  @var string */
    public $extend_data = null;
    
    /**  @var string[]  */
    public $destination_url = array();
    
    /**  @var string */
    public $creative_id = null;
    
    /**  @var string */
    public $resource_address = null;
    
    /**  @var string */
    public $feedback_address = null;
    
    /**  @var string */
    public $video_snippet = null;
    
    /**  @var \Tanx\MobileCreative */
    public $mobile_creative = null;
    
    /**  @var int */
    public $dealid = null;
    
    /**  @var int[]  */
    public $advertiser_ids = array();
    
    /**  @var string */
    public $native_template_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidResponse.Ads');

      // REQUIRED UINT32 adzinfo_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "adzinfo_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED UINT32 max_cpm_price = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "max_cpm_price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 ad_bid_count_idx = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ad_bid_count_idx";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING html_snippet = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "html_snippet";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING click_through_url = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "click_through_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED INT32 category = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "category";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED INT32 creative_type = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "creative_type";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING network_guid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "network_guid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING extend_data = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "extend_data";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING destination_url = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "destination_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING creative_id = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "creative_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING resource_address = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "resource_address";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING feedback_address = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "feedback_address";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING video_snippet = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "video_snippet";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE mobile_creative = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "mobile_creative";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Tanx\MobileCreative';
      $descriptor->addField($f);

      // OPTIONAL UINT32 dealid = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "dealid";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED UINT32 advertiser_ids = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "advertiser_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING native_template_id = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "native_template_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <adzinfo_id> has a value
     *
     * @return boolean
     */
    public function hasAdzinfoId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <adzinfo_id> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearAdzinfoId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <adzinfo_id> value
     *
     * @return int
     */
    public function getAdzinfoId(){
      return $this->_get(1);
    }
    
    /**
     * Set <adzinfo_id> value
     *
     * @param int $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setAdzinfoId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <max_cpm_price> has a value
     *
     * @return boolean
     */
    public function hasMaxCpmPrice(){
      return $this->_has(2);
    }
    
    /**
     * Clear <max_cpm_price> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearMaxCpmPrice(){
      return $this->_clear(2);
    }
    
    /**
     * Get <max_cpm_price> value
     *
     * @return int
     */
    public function getMaxCpmPrice(){
      return $this->_get(2);
    }
    
    /**
     * Set <max_cpm_price> value
     *
     * @param int $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setMaxCpmPrice( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ad_bid_count_idx> has a value
     *
     * @return boolean
     */
    public function hasAdBidCountIdx(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ad_bid_count_idx> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearAdBidCountIdx(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ad_bid_count_idx> value
     *
     * @return int
     */
    public function getAdBidCountIdx(){
      return $this->_get(3);
    }
    
    /**
     * Set <ad_bid_count_idx> value
     *
     * @param int $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setAdBidCountIdx( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <html_snippet> has a value
     *
     * @return boolean
     */
    public function hasHtmlSnippet(){
      return $this->_has(4);
    }
    
    /**
     * Clear <html_snippet> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearHtmlSnippet(){
      return $this->_clear(4);
    }
    
    /**
     * Get <html_snippet> value
     *
     * @return string
     */
    public function getHtmlSnippet(){
      return $this->_get(4);
    }
    
    /**
     * Set <html_snippet> value
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setHtmlSnippet( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <click_through_url> has a value
     *
     * @return boolean
     */
    public function hasClickThroughUrl(){
      return $this->_has(5);
    }
    
    /**
     * Clear <click_through_url> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearClickThroughUrl(){
      return $this->_clear(5);
    }
    
    /**
     * Get <click_through_url> value
     *
     * @param int $idx
     * @return string
     */
    public function getClickThroughUrl($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <click_through_url> value
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setClickThroughUrl( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <click_through_url>
     *
     * @return string[]
     */
    public function getClickThroughUrlList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <click_through_url>
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function addClickThroughUrl( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <category> has a value
     *
     * @return boolean
     */
    public function hasCategory(){
      return $this->_has(6);
    }
    
    /**
     * Clear <category> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearCategory(){
      return $this->_clear(6);
    }
    
    /**
     * Get <category> value
     *
     * @param int $idx
     * @return int
     */
    public function getCategory($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <category> value
     *
     * @param int $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setCategory( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <category>
     *
     * @return int[]
     */
    public function getCategoryList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <category>
     *
     * @param int $value
     * @return \Tanx\BidResponse\Ads
     */
    public function addCategory( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <creative_type> has a value
     *
     * @return boolean
     */
    public function hasCreativeType(){
      return $this->_has(7);
    }
    
    /**
     * Clear <creative_type> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearCreativeType(){
      return $this->_clear(7);
    }
    
    /**
     * Get <creative_type> value
     *
     * @param int $idx
     * @return int
     */
    public function getCreativeType($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <creative_type> value
     *
     * @param int $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setCreativeType( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <creative_type>
     *
     * @return int[]
     */
    public function getCreativeTypeList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <creative_type>
     *
     * @param int $value
     * @return \Tanx\BidResponse\Ads
     */
    public function addCreativeType( $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <network_guid> has a value
     *
     * @return boolean
     */
    public function hasNetworkGuid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <network_guid> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearNetworkGuid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <network_guid> value
     *
     * @return string
     */
    public function getNetworkGuid(){
      return $this->_get(8);
    }
    
    /**
     * Set <network_guid> value
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setNetworkGuid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <extend_data> has a value
     *
     * @return boolean
     */
    public function hasExtendData(){
      return $this->_has(9);
    }
    
    /**
     * Clear <extend_data> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearExtendData(){
      return $this->_clear(9);
    }
    
    /**
     * Get <extend_data> value
     *
     * @return string
     */
    public function getExtendData(){
      return $this->_get(9);
    }
    
    /**
     * Set <extend_data> value
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setExtendData( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <destination_url> has a value
     *
     * @return boolean
     */
    public function hasDestinationUrl(){
      return $this->_has(10);
    }
    
    /**
     * Clear <destination_url> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearDestinationUrl(){
      return $this->_clear(10);
    }
    
    /**
     * Get <destination_url> value
     *
     * @param int $idx
     * @return string
     */
    public function getDestinationUrl($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <destination_url> value
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setDestinationUrl( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <destination_url>
     *
     * @return string[]
     */
    public function getDestinationUrlList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <destination_url>
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function addDestinationUrl( $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <creative_id> has a value
     *
     * @return boolean
     */
    public function hasCreativeId(){
      return $this->_has(11);
    }
    
    /**
     * Clear <creative_id> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearCreativeId(){
      return $this->_clear(11);
    }
    
    /**
     * Get <creative_id> value
     *
     * @return string
     */
    public function getCreativeId(){
      return $this->_get(11);
    }
    
    /**
     * Set <creative_id> value
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setCreativeId( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <resource_address> has a value
     *
     * @return boolean
     */
    public function hasResourceAddress(){
      return $this->_has(12);
    }
    
    /**
     * Clear <resource_address> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearResourceAddress(){
      return $this->_clear(12);
    }
    
    /**
     * Get <resource_address> value
     *
     * @return string
     */
    public function getResourceAddress(){
      return $this->_get(12);
    }
    
    /**
     * Set <resource_address> value
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setResourceAddress( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <feedback_address> has a value
     *
     * @return boolean
     */
    public function hasFeedbackAddress(){
      return $this->_has(13);
    }
    
    /**
     * Clear <feedback_address> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearFeedbackAddress(){
      return $this->_clear(13);
    }
    
    /**
     * Get <feedback_address> value
     *
     * @return string
     */
    public function getFeedbackAddress(){
      return $this->_get(13);
    }
    
    /**
     * Set <feedback_address> value
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setFeedbackAddress( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <video_snippet> has a value
     *
     * @return boolean
     */
    public function hasVideoSnippet(){
      return $this->_has(14);
    }
    
    /**
     * Clear <video_snippet> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearVideoSnippet(){
      return $this->_clear(14);
    }
    
    /**
     * Get <video_snippet> value
     *
     * @return string
     */
    public function getVideoSnippet(){
      return $this->_get(14);
    }
    
    /**
     * Set <video_snippet> value
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setVideoSnippet( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <mobile_creative> has a value
     *
     * @return boolean
     */
    public function hasMobileCreative(){
      return $this->_has(15);
    }
    
    /**
     * Clear <mobile_creative> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearMobileCreative(){
      return $this->_clear(15);
    }
    
    /**
     * Get <mobile_creative> value
     *
     * @return \Tanx\MobileCreative
     */
    public function getMobileCreative(){
      return $this->_get(15);
    }
    
    /**
     * Set <mobile_creative> value
     *
     * @param \Tanx\MobileCreative $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setMobileCreative(\Tanx\MobileCreative $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <dealid> has a value
     *
     * @return boolean
     */
    public function hasDealid(){
      return $this->_has(16);
    }
    
    /**
     * Clear <dealid> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearDealid(){
      return $this->_clear(16);
    }
    
    /**
     * Get <dealid> value
     *
     * @return int
     */
    public function getDealid(){
      return $this->_get(16);
    }
    
    /**
     * Set <dealid> value
     *
     * @param int $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setDealid( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <advertiser_ids> has a value
     *
     * @return boolean
     */
    public function hasAdvertiserIds(){
      return $this->_has(17);
    }
    
    /**
     * Clear <advertiser_ids> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearAdvertiserIds(){
      return $this->_clear(17);
    }
    
    /**
     * Get <advertiser_ids> value
     *
     * @param int $idx
     * @return int
     */
    public function getAdvertiserIds($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <advertiser_ids> value
     *
     * @param int $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setAdvertiserIds( $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <advertiser_ids>
     *
     * @return int[]
     */
    public function getAdvertiserIdsList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <advertiser_ids>
     *
     * @param int $value
     * @return \Tanx\BidResponse\Ads
     */
    public function addAdvertiserIds( $value){
     return $this->_add(17, $value);
    }
    
    /**
     * Check if <native_template_id> has a value
     *
     * @return boolean
     */
    public function hasNativeTemplateId(){
      return $this->_has(18);
    }
    
    /**
     * Clear <native_template_id> value
     *
     * @return \Tanx\BidResponse\Ads
     */
    public function clearNativeTemplateId(){
      return $this->_clear(18);
    }
    
    /**
     * Get <native_template_id> value
     *
     * @return string
     */
    public function getNativeTemplateId(){
      return $this->_get(18);
    }
    
    /**
     * Set <native_template_id> value
     *
     * @param string $value
     * @return \Tanx\BidResponse\Ads
     */
    public function setNativeTemplateId( $value){
      return $this->_set(18, $value);
    }
  }
}

namespace Tanx {

  class BidResponse extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $version = null;
    
    /**  @var string */
    public $bid = null;
    
    /**  @var \Tanx\BidResponse\Ads[]  */
    public $ads = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidResponse');

      // REQUIRED INT32 version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING bid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE ads = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ads";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\BidResponse\Ads';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <version> value
     *
     * @return \Tanx\BidResponse
     */
    public function clearVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \Tanx\BidResponse
     */
    public function setVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bid> has a value
     *
     * @return boolean
     */
    public function hasBid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bid> value
     *
     * @return \Tanx\BidResponse
     */
    public function clearBid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bid> value
     *
     * @return string
     */
    public function getBid(){
      return $this->_get(2);
    }
    
    /**
     * Set <bid> value
     *
     * @param string $value
     * @return \Tanx\BidResponse
     */
    public function setBid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ads> has a value
     *
     * @return boolean
     */
    public function hasAds(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ads> value
     *
     * @return \Tanx\BidResponse
     */
    public function clearAds(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ads> value
     *
     * @param int $idx
     * @return \Tanx\BidResponse\Ads
     */
    public function getAds($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <ads> value
     *
     * @param \Tanx\BidResponse\Ads $value
     * @return \Tanx\BidResponse
     */
    public function setAds(\Tanx\BidResponse\Ads $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <ads>
     *
     * @return \Tanx\BidResponse\Ads[]
     */
    public function getAdsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <ads>
     *
     * @param \Tanx\BidResponse\Ads $value
     * @return \Tanx\BidResponse
     */
    public function addAds(\Tanx\BidResponse\Ads $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Tanx\BidResult {

  class Res extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $adzinfo_id = null;
    
    /**  @var int */
    public $ad_bid_count_idx = null;
    
    /**  @var int */
    public $result_code = 0;
    
    /**  @var int */
    public $result_price = null;
    
    /**  @var string */
    public $extend_data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidResult.Res');

      // REQUIRED UINT32 adzinfo_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "adzinfo_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 ad_bid_count_idx = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ad_bid_count_idx";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 result_code = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "result_code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL UINT32 result_price = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "result_price";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING extend_data = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "extend_data";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <adzinfo_id> has a value
     *
     * @return boolean
     */
    public function hasAdzinfoId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <adzinfo_id> value
     *
     * @return \Tanx\BidResult\Res
     */
    public function clearAdzinfoId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <adzinfo_id> value
     *
     * @return int
     */
    public function getAdzinfoId(){
      return $this->_get(1);
    }
    
    /**
     * Set <adzinfo_id> value
     *
     * @param int $value
     * @return \Tanx\BidResult\Res
     */
    public function setAdzinfoId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ad_bid_count_idx> has a value
     *
     * @return boolean
     */
    public function hasAdBidCountIdx(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ad_bid_count_idx> value
     *
     * @return \Tanx\BidResult\Res
     */
    public function clearAdBidCountIdx(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ad_bid_count_idx> value
     *
     * @return int
     */
    public function getAdBidCountIdx(){
      return $this->_get(2);
    }
    
    /**
     * Set <ad_bid_count_idx> value
     *
     * @param int $value
     * @return \Tanx\BidResult\Res
     */
    public function setAdBidCountIdx( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <result_code> has a value
     *
     * @return boolean
     */
    public function hasResultCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <result_code> value
     *
     * @return \Tanx\BidResult\Res
     */
    public function clearResultCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <result_code> value
     *
     * @return int
     */
    public function getResultCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <result_code> value
     *
     * @param int $value
     * @return \Tanx\BidResult\Res
     */
    public function setResultCode( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <result_price> has a value
     *
     * @return boolean
     */
    public function hasResultPrice(){
      return $this->_has(4);
    }
    
    /**
     * Clear <result_price> value
     *
     * @return \Tanx\BidResult\Res
     */
    public function clearResultPrice(){
      return $this->_clear(4);
    }
    
    /**
     * Get <result_price> value
     *
     * @return int
     */
    public function getResultPrice(){
      return $this->_get(4);
    }
    
    /**
     * Set <result_price> value
     *
     * @param int $value
     * @return \Tanx\BidResult\Res
     */
    public function setResultPrice( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <extend_data> has a value
     *
     * @return boolean
     */
    public function hasExtendData(){
      return $this->_has(5);
    }
    
    /**
     * Clear <extend_data> value
     *
     * @return \Tanx\BidResult\Res
     */
    public function clearExtendData(){
      return $this->_clear(5);
    }
    
    /**
     * Get <extend_data> value
     *
     * @return string
     */
    public function getExtendData(){
      return $this->_get(5);
    }
    
    /**
     * Set <extend_data> value
     *
     * @param string $value
     * @return \Tanx\BidResult\Res
     */
    public function setExtendData( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace Tanx {

  class BidResult extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $version = null;
    
    /**  @var string */
    public $bid = null;
    
    /**  @var \Tanx\BidResult\Res[]  */
    public $res = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.BidResult');

      // REQUIRED INT32 version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING bid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE res = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "res";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\BidResult\Res';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <version> value
     *
     * @return \Tanx\BidResult
     */
    public function clearVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \Tanx\BidResult
     */
    public function setVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bid> has a value
     *
     * @return boolean
     */
    public function hasBid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bid> value
     *
     * @return \Tanx\BidResult
     */
    public function clearBid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bid> value
     *
     * @return string
     */
    public function getBid(){
      return $this->_get(2);
    }
    
    /**
     * Set <bid> value
     *
     * @param string $value
     * @return \Tanx\BidResult
     */
    public function setBid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <res> has a value
     *
     * @return boolean
     */
    public function hasRes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <res> value
     *
     * @return \Tanx\BidResult
     */
    public function clearRes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <res> value
     *
     * @param int $idx
     * @return \Tanx\BidResult\Res
     */
    public function getRes($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <res> value
     *
     * @param \Tanx\BidResult\Res $value
     * @return \Tanx\BidResult
     */
    public function setRes(\Tanx\BidResult\Res $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <res>
     *
     * @return \Tanx\BidResult\Res[]
     */
    public function getResList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <res>
     *
     * @param \Tanx\BidResult\Res $value
     * @return \Tanx\BidResult
     */
    public function addRes(\Tanx\BidResult\Res $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Tanx\MobileCreative\Creative {

  class Attr extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.MobileCreative.Creative.Attr');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \Tanx\MobileCreative\Creative\Attr
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative\Attr
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Tanx\MobileCreative\Creative\Attr
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative\Attr
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Tanx\MobileCreative\Creative {

  class TrackingEvents extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $impression_event = array();
    
    /**  @var string[]  */
    public $click_event = array();
    
    /**  @var string[]  */
    public $download_complete_event = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.MobileCreative.Creative.TrackingEvents');

      // REPEATED STRING impression_event = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "impression_event";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING click_event = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "click_event";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING download_complete_event = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "download_complete_event";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <impression_event> has a value
     *
     * @return boolean
     */
    public function hasImpressionEvent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <impression_event> value
     *
     * @return \Tanx\MobileCreative\Creative\TrackingEvents
     */
    public function clearImpressionEvent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <impression_event> value
     *
     * @param int $idx
     * @return string
     */
    public function getImpressionEvent($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <impression_event> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative\TrackingEvents
     */
    public function setImpressionEvent( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <impression_event>
     *
     * @return string[]
     */
    public function getImpressionEventList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <impression_event>
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative\TrackingEvents
     */
    public function addImpressionEvent( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <click_event> has a value
     *
     * @return boolean
     */
    public function hasClickEvent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <click_event> value
     *
     * @return \Tanx\MobileCreative\Creative\TrackingEvents
     */
    public function clearClickEvent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <click_event> value
     *
     * @param int $idx
     * @return string
     */
    public function getClickEvent($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <click_event> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative\TrackingEvents
     */
    public function setClickEvent( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <click_event>
     *
     * @return string[]
     */
    public function getClickEventList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <click_event>
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative\TrackingEvents
     */
    public function addClickEvent( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <download_complete_event> has a value
     *
     * @return boolean
     */
    public function hasDownloadCompleteEvent(){
      return $this->_has(3);
    }
    
    /**
     * Clear <download_complete_event> value
     *
     * @return \Tanx\MobileCreative\Creative\TrackingEvents
     */
    public function clearDownloadCompleteEvent(){
      return $this->_clear(3);
    }
    
    /**
     * Get <download_complete_event> value
     *
     * @param int $idx
     * @return string
     */
    public function getDownloadCompleteEvent($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <download_complete_event> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative\TrackingEvents
     */
    public function setDownloadCompleteEvent( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <download_complete_event>
     *
     * @return string[]
     */
    public function getDownloadCompleteEventList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <download_complete_event>
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative\TrackingEvents
     */
    public function addDownloadCompleteEvent( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace Tanx\MobileCreative {

  class Creative extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $img_url = null;
    
    /**  @var string */
    public $img_size = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $click_url = null;
    
    /**  @var string */
    public $destination_url = null;
    
    /**  @var \Tanx\MobileCreative\Creative\Attr[]  */
    public $attr = array();
    
    /**  @var string */
    public $creative_id = null;
    
    /**  @var int[]  */
    public $category = array();
    
    /**  @var \Tanx\MobileCreative\Creative\TrackingEvents */
    public $tracking_events = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.MobileCreative.Creative');

      // OPTIONAL STRING img_url = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "img_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING img_size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "img_size";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING click_url = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "click_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING destination_url = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "destination_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE attr = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "attr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\MobileCreative\Creative\Attr';
      $descriptor->addField($f);

      // OPTIONAL STRING creative_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "creative_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED INT32 category = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "category";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tracking_events = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "tracking_events";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Tanx\MobileCreative\Creative\TrackingEvents';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <img_url> has a value
     *
     * @return boolean
     */
    public function hasImgUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <img_url> value
     *
     * @return \Tanx\MobileCreative\Creative
     */
    public function clearImgUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <img_url> value
     *
     * @return string
     */
    public function getImgUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <img_url> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function setImgUrl( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <img_size> has a value
     *
     * @return boolean
     */
    public function hasImgSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <img_size> value
     *
     * @return \Tanx\MobileCreative\Creative
     */
    public function clearImgSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <img_size> value
     *
     * @return string
     */
    public function getImgSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <img_size> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function setImgSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(3);
    }
    
    /**
     * Clear <title> value
     *
     * @return \Tanx\MobileCreative\Creative
     */
    public function clearTitle(){
      return $this->_clear(3);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(3);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function setTitle( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <click_url> has a value
     *
     * @return boolean
     */
    public function hasClickUrl(){
      return $this->_has(4);
    }
    
    /**
     * Clear <click_url> value
     *
     * @return \Tanx\MobileCreative\Creative
     */
    public function clearClickUrl(){
      return $this->_clear(4);
    }
    
    /**
     * Get <click_url> value
     *
     * @return string
     */
    public function getClickUrl(){
      return $this->_get(4);
    }
    
    /**
     * Set <click_url> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function setClickUrl( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <destination_url> has a value
     *
     * @return boolean
     */
    public function hasDestinationUrl(){
      return $this->_has(5);
    }
    
    /**
     * Clear <destination_url> value
     *
     * @return \Tanx\MobileCreative\Creative
     */
    public function clearDestinationUrl(){
      return $this->_clear(5);
    }
    
    /**
     * Get <destination_url> value
     *
     * @return string
     */
    public function getDestinationUrl(){
      return $this->_get(5);
    }
    
    /**
     * Set <destination_url> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function setDestinationUrl( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <attr> has a value
     *
     * @return boolean
     */
    public function hasAttr(){
      return $this->_has(6);
    }
    
    /**
     * Clear <attr> value
     *
     * @return \Tanx\MobileCreative\Creative
     */
    public function clearAttr(){
      return $this->_clear(6);
    }
    
    /**
     * Get <attr> value
     *
     * @param int $idx
     * @return \Tanx\MobileCreative\Creative\Attr
     */
    public function getAttr($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <attr> value
     *
     * @param \Tanx\MobileCreative\Creative\Attr $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function setAttr(\Tanx\MobileCreative\Creative\Attr $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <attr>
     *
     * @return \Tanx\MobileCreative\Creative\Attr[]
     */
    public function getAttrList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <attr>
     *
     * @param \Tanx\MobileCreative\Creative\Attr $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function addAttr(\Tanx\MobileCreative\Creative\Attr $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <creative_id> has a value
     *
     * @return boolean
     */
    public function hasCreativeId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <creative_id> value
     *
     * @return \Tanx\MobileCreative\Creative
     */
    public function clearCreativeId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <creative_id> value
     *
     * @return string
     */
    public function getCreativeId(){
      return $this->_get(7);
    }
    
    /**
     * Set <creative_id> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function setCreativeId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <category> has a value
     *
     * @return boolean
     */
    public function hasCategory(){
      return $this->_has(8);
    }
    
    /**
     * Clear <category> value
     *
     * @return \Tanx\MobileCreative\Creative
     */
    public function clearCategory(){
      return $this->_clear(8);
    }
    
    /**
     * Get <category> value
     *
     * @param int $idx
     * @return int
     */
    public function getCategory($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <category> value
     *
     * @param int $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function setCategory( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <category>
     *
     * @return int[]
     */
    public function getCategoryList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <category>
     *
     * @param int $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function addCategory( $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <tracking_events> has a value
     *
     * @return boolean
     */
    public function hasTrackingEvents(){
      return $this->_has(9);
    }
    
    /**
     * Clear <tracking_events> value
     *
     * @return \Tanx\MobileCreative\Creative
     */
    public function clearTrackingEvents(){
      return $this->_clear(9);
    }
    
    /**
     * Get <tracking_events> value
     *
     * @return \Tanx\MobileCreative\Creative\TrackingEvents
     */
    public function getTrackingEvents(){
      return $this->_get(9);
    }
    
    /**
     * Set <tracking_events> value
     *
     * @param \Tanx\MobileCreative\Creative\TrackingEvents $value
     * @return \Tanx\MobileCreative\Creative
     */
    public function setTrackingEvents(\Tanx\MobileCreative\Creative\TrackingEvents $value){
      return $this->_set(9, $value);
    }
  }
}

namespace Tanx {

  class MobileCreative extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $version = null;
    
    /**  @var string */
    public $bid = null;
    
    /**  @var int */
    public $view_type = null;
    
    /**  @var \Tanx\MobileCreative\Creative[]  */
    public $creatives = array();
    
    /**  @var string */
    public $native_template_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Tanx.MobileCreative');

      // REQUIRED INT32 version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING bid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL UINT32 view_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "view_type";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE creatives = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "creatives";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Tanx\MobileCreative\Creative';
      $descriptor->addField($f);

      // OPTIONAL STRING native_template_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "native_template_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <version> value
     *
     * @return \Tanx\MobileCreative
     */
    public function clearVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <version> value
     *
     * @param int $value
     * @return \Tanx\MobileCreative
     */
    public function setVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bid> has a value
     *
     * @return boolean
     */
    public function hasBid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bid> value
     *
     * @return \Tanx\MobileCreative
     */
    public function clearBid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bid> value
     *
     * @return string
     */
    public function getBid(){
      return $this->_get(2);
    }
    
    /**
     * Set <bid> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative
     */
    public function setBid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <view_type> has a value
     *
     * @return boolean
     */
    public function hasViewType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <view_type> value
     *
     * @return \Tanx\MobileCreative
     */
    public function clearViewType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <view_type> value
     *
     * @return int
     */
    public function getViewType(){
      return $this->_get(3);
    }
    
    /**
     * Set <view_type> value
     *
     * @param int $value
     * @return \Tanx\MobileCreative
     */
    public function setViewType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <creatives> has a value
     *
     * @return boolean
     */
    public function hasCreatives(){
      return $this->_has(4);
    }
    
    /**
     * Clear <creatives> value
     *
     * @return \Tanx\MobileCreative
     */
    public function clearCreatives(){
      return $this->_clear(4);
    }
    
    /**
     * Get <creatives> value
     *
     * @param int $idx
     * @return \Tanx\MobileCreative\Creative
     */
    public function getCreatives($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <creatives> value
     *
     * @param \Tanx\MobileCreative\Creative $value
     * @return \Tanx\MobileCreative
     */
    public function setCreatives(\Tanx\MobileCreative\Creative $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <creatives>
     *
     * @return \Tanx\MobileCreative\Creative[]
     */
    public function getCreativesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <creatives>
     *
     * @param \Tanx\MobileCreative\Creative $value
     * @return \Tanx\MobileCreative
     */
    public function addCreatives(\Tanx\MobileCreative\Creative $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <native_template_id> has a value
     *
     * @return boolean
     */
    public function hasNativeTemplateId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <native_template_id> value
     *
     * @return \Tanx\MobileCreative
     */
    public function clearNativeTemplateId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <native_template_id> value
     *
     * @return string
     */
    public function getNativeTemplateId(){
      return $this->_get(5);
    }
    
    /**
     * Set <native_template_id> value
     *
     * @param string $value
     * @return \Tanx\MobileCreative
     */
    public function setNativeTemplateId( $value){
      return $this->_set(5, $value);
    }
  }
}

